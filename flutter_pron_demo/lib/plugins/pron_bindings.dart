// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'dart:ffi';
import 'package:ffi/ffi.dart';

/// Bindings to flutter_pron
class PronGO {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PronGO(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PronGO.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  GoString Pron(
    GoString audiofile,
    GoString word,
    GoString outputfolder,
    GoString dictfile,
    GoString phdictfile,
    GoString featparams,
    GoString hmm,
  ) {
    return _Pron(
      audiofile,
      word,
      outputfolder,
      dictfile,
      phdictfile,
      featparams,
      hmm,
    );
  }

  late final _PronPtr = _lookup<
      ffi.NativeFunction<
          GoString Function(GoString, GoString, GoString, GoString, GoString,
              GoString, GoString)>>('Pron');
  late final _Pron = _PronPtr.asFunction<
      GoString Function(GoString, GoString, GoString, GoString, GoString,
          GoString, GoString)>();
}

class max_align_t extends ffi.Opaque {}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;
  // external ffi.Pointer<Utf8> p;

  @ptrdiff_t()
  external int n;
  //This is from:
  //https://gist.github.com/sjindel-google/b88c964eb260e09280e588c41c6af3e5
  // String toString() {
  //   List<int> units = [];
  //   for (int i = 0; i < n; ++i) {
  //     units.add(p.elementAt(i).value);
  //   }
  //   return Utf8Decoder().convert(units);
  // }

  // _GoString_(String string) {
  //   List<int> units = Utf8Encoder().convert(string);
  //   p = malloc.allocate<Char>(units.length);
  //   for (int i = 0; i < units.length; ++i) {
  //     p.elementAt(i).value = units[i];
  //   }
  //   n = units.length;
  // }

  // void free() {
  //   malloc.free(p);
  // }
}

typedef ptrdiff_t = ffi.Long;

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef GoString = _GoString_;

const int NULL = 0;

GoString toGoString(String string) {
  GoString goString = malloc.allocate<GoString>(1).ref;
  List<int> units = Utf8Encoder().convert(string);
  goString.p = malloc.allocate<ffi.Char>(units.length);
  for (int i = 0; i < units.length; ++i) {
    goString.p.elementAt(i).value = units[i];
  }
  goString.n = units.length;
  return goString;
  // return GoString()
  //   ..p = p
  //   ..n = units.length;
}

void freeGoString(GoString goString) {
  malloc.free(goString.p);
  // malloc.free(goString as ffi.Struct<ffi.Char>);
}

String fromGoString(GoString goString) {
  List<int> units = [];
  for (int i = 0; i < goString.n; ++i) {
    units.add(goString.p.elementAt(i).value);
  }
  // return units.join("");
  return Utf8Decoder().convert(units);
}
