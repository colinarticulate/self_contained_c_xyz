// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/c_demo_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FfigenAppBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FfigenAppBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FfigenAppBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _buffer =
      _lookup<ffi.Pointer<ffi.Char>>('buffer');

  ffi.Pointer<ffi.Char> get buffer => _buffer.value;

  set buffer(ffi.Pointer<ffi.Char> value) => _buffer.value = value;

  int add(
    int a,
    int b,
  ) {
    return _add(
      a,
      b,
    );
  }

  late final _addPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('add');
  late final _add = _addPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> capitalize(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _capitalize(
      str,
    );
  }

  late final _capitalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('capitalize');
  late final _capitalize = _capitalizePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> hello_world() {
    return _hello_world();
  }

  late final _hello_worldPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'hello_world');
  late final _hello_world =
      _hello_worldPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ArrayOfStrings> get_some_parameters(
    ffi.Pointer<ffi.Char> data_path,
  ) {
    return _get_some_parameters(
      data_path,
    );
  }

  late final _get_some_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ArrayOfStrings> Function(
              ffi.Pointer<ffi.Char>)>>('get_some_parameters');
  late final _get_some_parameters = _get_some_parametersPtr.asFunction<
      ffi.Pointer<ArrayOfStrings> Function(ffi.Pointer<ffi.Char>)>();

  void delete_params_sender(
    ffi.Pointer<ArrayOfStrings> params,
  ) {
    return _delete_params_sender(
      params,
    );
  }

  late final _delete_params_senderPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ArrayOfStrings>)>>(
      'delete_params_sender');
  late final _delete_params_sender = _delete_params_senderPtr
      .asFunction<void Function(ffi.Pointer<ArrayOfStrings>)>();

  void delete_results_sender(
    ffi.Pointer<ArrayOfStrings> results,
  ) {
    return _delete_results_sender(
      results,
    );
  }

  late final _delete_results_senderPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ArrayOfStrings>)>>(
      'delete_results_sender');
  late final _delete_results_sender = _delete_results_senderPtr
      .asFunction<void Function(ffi.Pointer<ArrayOfStrings>)>();

  void delete_results_sender_batch(
    ffi.Pointer<ArrayOfStrings> results,
  ) {
    return _delete_results_sender_batch(
      results,
    );
  }

  late final _delete_results_sender_batchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ArrayOfStrings>)>>(
      'delete_results_sender_batch');
  late final _delete_results_sender_batch = _delete_results_sender_batchPtr
      .asFunction<void Function(ffi.Pointer<ArrayOfStrings>)>();

  ffi.Pointer<ArrayOfStrings> ps_demo(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ps_demo(
      path,
    );
  }

  late final _ps_demoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ArrayOfStrings> Function(
              ffi.Pointer<ffi.Char>)>>('ps_demo');
  late final _ps_demo = _ps_demoPtr.asFunction<
      ffi.Pointer<ArrayOfStrings> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ArrayOfStrings> ps_demo_sequential(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ps_demo_sequential(
      path,
    );
  }

  late final _ps_demo_sequentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ArrayOfStrings> Function(
              ffi.Pointer<ffi.Char>)>>('ps_demo_sequential');
  late final _ps_demo_sequential = _ps_demo_sequentialPtr.asFunction<
      ffi.Pointer<ArrayOfStrings> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ArrayOfStrings> ps_batch_demo(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ps_batch_demo(
      path,
    );
  }

  late final _ps_batch_demoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ArrayOfStrings> Function(
              ffi.Pointer<ffi.Char>)>>('ps_batch_demo');
  late final _ps_batch_demo = _ps_batch_demoPtr.asFunction<
      ffi.Pointer<ArrayOfStrings> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ArrayOfStrings> ps_batch_demo_sequential(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ps_batch_demo_sequential(
      path,
    );
  }

  late final _ps_batch_demo_sequentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ArrayOfStrings> Function(
              ffi.Pointer<ffi.Char>)>>('ps_batch_demo_sequential');
  late final _ps_batch_demo_sequential =
      _ps_batch_demo_sequentialPtr.asFunction<
          ffi.Pointer<ArrayOfStrings> Function(ffi.Pointer<ffi.Char>)>();
}

class Array extends ffi.Struct {
  external ffi.Pointer<ffi.Char> array;

  @ffi.Int()
  external int len;
}

class ArrayOfStrings extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> array;

  @ffi.Int()
  external int num_arrays;
}
